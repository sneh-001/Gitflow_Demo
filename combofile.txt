// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "../interfaces/STAFO-Structs.sol";

contract STAFO_NFT is ERC721, AccessControl {
    bytes32 public MINTER_ROLE = keccak256("MINER_ROLE");
    bytes32 public INVESTOR_ROLE = keccak256("INVESTOR_ROLE");

    uint256 tokenId;

    mapping(uint256 => ProjectMetaData) public Projects;

    constructor(
        string memory _name,
        string memory _symbol,
        address MinterContract,
        address InvestorContract
    ) ERC721(_name, _symbol) AccessControl() {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);
        _grantRole(MINTER_ROLE, MinterContract);
        _grantRole(INVESTOR_ROLE, InvestorContract);
    }

    function checkProject(uint256 _tokenId) internal view {
        require(Projects[_tokenId].AmountToRaise > 0, "Invalid Project.");
    }

    function mint(
        address _projectOwner,
        ProjectMetaData memory _projectData
    ) external onlyRole(MINTER_ROLE) {
        tokenId++;
        Projects[tokenId] = _projectData;
        _mint(_projectOwner, tokenId);
    }

    function getCurrentInvestmentRaised(
        uint256 _tokeId
    ) external view returns (uint256) {
        return Projects[_tokeId].currentInvestmentRaised;
    }

    function getAmountToRaise(
        uint256 _tokenId
    ) external view returns (uint256) {
        return Projects[_tokenId].AmountToRaise;
    }

    function getMinimumTokenPerWeek(
        uint256 _tokenId
    ) external view returns (uint256) {
        return Projects[_tokenId].minimumTokenPerWeek;
    }

    function getGrowthPercentage(
        uint256 _tokenId
    ) external view returns (uint256) {
        return Projects[_tokenId].GrowthPercentage;
    }

    function getMinAmountToRaiseInWeek(
        uint256 _tokenId
    ) external view returns (uint256) {
        return Projects[_tokenId].minAmountToRaiseInWeek;
    }

    function getIsPurchased(uint256 _tokenId) external view returns (bool) {
        return Projects[_tokenId].isPurchased;
    }

    function investToProject(
        uint256 _tokenId,
        uint256 _AmountInvested
    ) external onlyRole(INVESTOR_ROLE) {
        checkProject(_tokenId);
        Projects[_tokenId].currentInvestmentRaised += _AmountInvested;
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view virtual override(ERC721, AccessControl) returns (bool) {
        return
            interfaceId == type(IAccessControl).interfaceId ||
            super.supportsInterface(interfaceId);
    }
}